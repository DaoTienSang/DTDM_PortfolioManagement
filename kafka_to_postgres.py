#!/usr/bin/env python3
import json
import os
import time
import logging
from datetime import datetime
from kafka import KafkaConsumer
import psycopg2
from psycopg2.extras import execute_values

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Th√¥ng tin k·∫øt n·ªëi Kafka
KAFKA_BROKER = os.environ.get('KAFKA_BROKER', 'kafka:9092')
KAFKA_TOPIC = 'stock-history-topic'  # Topic ch·ª©a d·ªØ li·ªáu c·ªï phi·∫øu

# Th√¥ng tin k·∫øt n·ªëi PostgreSQL
PG_HOST = os.environ.get('DB_HOST', 'db')
PG_PORT = os.environ.get('DB_PORT', '5432')
PG_DB = os.environ.get('DB_NAME', 'portfolio')
PG_USER = os.environ.get('DB_USER', 'postgres')
PG_PASSWORD = os.environ.get('DB_PASSWORD', 'postgres')

def create_table_if_not_exists(conn):
    """T·∫°o b·∫£ng stock_prices n·∫øu ch∆∞a t·ªìn t·∫°i"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
            CREATE TABLE IF NOT EXISTS stock_prices (
                symbol VARCHAR(20) NOT NULL,
                price DOUBLE PRECISION,
                timestamp TIMESTAMP,
                PRIMARY KEY (symbol)
            )
            """)
        conn.commit()
        logger.info("‚úÖ B·∫£ng stock_prices ƒë√£ ƒë∆∞·ª£c t·∫°o ho·∫∑c ƒë√£ t·ªìn t·∫°i")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi t·∫°o b·∫£ng: {e}")
        conn.rollback()

def connect_to_postgres():
    """K·∫øt n·ªëi ƒë·∫øn PostgreSQL v√† tr·∫£ v·ªÅ connection"""
    try:
        conn = psycopg2.connect(
            host=PG_HOST,
            port=PG_PORT,
            dbname=PG_DB,
            user=PG_USER,
            password=PG_PASSWORD
        )
        logger.info("‚úÖ ƒê√£ k·∫øt n·ªëi ƒë·∫øn PostgreSQL")
        return conn
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn PostgreSQL: {e}")
        raise

def connect_to_kafka():
    """K·∫øt n·ªëi ƒë·∫øn Kafka v√† tr·∫£ v·ªÅ consumer"""
    try:
        # Th·ª≠ k·∫øt n·ªëi ƒë·∫øn Kafka v·ªõi backoff
        for attempt in range(5):
            try:
                consumer = KafkaConsumer(
                    KAFKA_TOPIC,
                    bootstrap_servers=KAFKA_BROKER,
                    auto_offset_reset='latest',
                    enable_auto_commit=True,
                    group_id='stock-to-postgres',
                    value_deserializer=lambda x: json.loads(x.decode('utf-8'))
                )
                logger.info(f"‚úÖ ƒê√£ k·∫øt n·ªëi ƒë·∫øn Kafka broker: {KAFKA_BROKER}")
                return consumer
            except Exception as e:
                if attempt < 4:
                    wait_time = (2 ** attempt)
                    logger.warning(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Kafka. Th·ª≠ l·∫°i sau {wait_time}s... ({attempt+1}/5)")
                    time.sleep(wait_time)
                else:
                    raise
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Kafka: {e}")
        raise

def upsert_stock_prices(conn, records):
    """C·∫≠p nh·∫≠t ho·∫∑c th√™m m·ªõi gi√° c·ªï phi·∫øu v√†o PostgreSQL"""
    if not records:
        return
    
    try:
        with conn.cursor() as cur:
            # S·ª≠ d·ª•ng execute_values ƒë·ªÉ th·ª±c hi·ªán upsert nhi·ªÅu records c√πng l√∫c
            insert_query = """
            INSERT INTO stock_prices (symbol, price, timestamp)
            VALUES %s
            ON CONFLICT (symbol) 
            DO UPDATE SET
                price = EXCLUDED.price,
                timestamp = EXCLUDED.timestamp
            """
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng m√† execute_values mong ƒë·ª£i
            values = [(r['symbol'], r['price'], r['timestamp']) for r in records]
            
            execute_values(cur, insert_query, values)
            
        conn.commit()
        logger.info(f"‚úÖ ƒê√£ l∆∞u {len(records)} gi√° c·ªï phi·∫øu v√†o PostgreSQL")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu v√†o PostgreSQL: {e}")
        conn.rollback()

def process_messages():
    """X·ª≠ l√Ω tin nh·∫Øn t·ª´ Kafka v√† l∆∞u v√†o PostgreSQL"""
    try:
        # K·∫øt n·ªëi ƒë·∫øn PostgreSQL
        pg_conn = connect_to_postgres()
        
        # T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
        create_table_if_not_exists(pg_conn)
        
        # K·∫øt n·ªëi ƒë·∫øn Kafka
        consumer = connect_to_kafka()
        
        # ƒê·∫øm s·ªë l∆∞·ª£ng messages ƒë√£ x·ª≠ l√Ω
        message_count = 0
        batch_size = 50
        batch_records = []
        last_commit_time = time.time()
        
        logger.info(f"üîÑ B·∫Øt ƒë·∫ßu l·∫Øng nghe messages t·ª´ topic {KAFKA_TOPIC}...")
        
        # L·∫Øng nghe v√† x·ª≠ l√Ω messages
        for message in consumer:
            try:
                data = message.value
                
                # L·∫•y th√¥ng tin c·ªï phi·∫øu t·ª´ message
                symbol = data.get('symbol')
                current_price = data.get('current_price')
                
                # B·ªè qua n·∫øu kh√¥ng c√≥ symbol ho·∫∑c gi√°
                if not symbol or current_price is None:
                    continue
                
                # Chu·∫©n b·ªã record ƒë·ªÉ l∆∞u v√†o PostgreSQL
                record = {
                    'symbol': symbol,
                    'price': current_price,
                    'timestamp': datetime.now().isoformat()
                }
                
                batch_records.append(record)
                message_count += 1
                
                # Ki·ªÉm tra n·∫øu ƒë·ªß batch_size ho·∫∑c ƒë√£ qu√° th·ªùi gian ƒë·ªÉ commit
                current_time = time.time()
                if len(batch_records) >= batch_size or (current_time - last_commit_time) > 60:
                    upsert_stock_prices(pg_conn, batch_records)
                    batch_records = []
                    last_commit_time = current_time
                    
                # Log th·ªëng k√™ sau m·ªói 100 messages
                if message_count % 100 == 0:
                    logger.info(f"üìä ƒê√£ x·ª≠ l√Ω {message_count} messages")
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω message: {e}")
                
    except KeyboardInterrupt:
        logger.info("üõë Nh·∫≠n t√≠n hi·ªáu d·ª´ng ·ª©ng d·ª•ng...")
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
    finally:
        # ƒê·∫£m b·∫£o commit c√°c records c√≤n l·∫°i n·∫øu c√≥
        if pg_conn and batch_records:
            upsert_stock_prices(pg_conn, batch_records)
            
        # ƒê√≥ng k·∫øt n·ªëi
        if pg_conn:
            pg_conn.close()
            logger.info("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi PostgreSQL")
            
        logger.info("‚úÖ ·ª®ng d·ª•ng k·∫øt th√∫c")

if __name__ == "__main__":
    # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ c√°c services kh√°c kh·ªüi ƒë·ªông
    logger.info("‚è≥ Ch·ªù 30 gi√¢y ƒë·ªÉ c√°c services kh√°c kh·ªüi ƒë·ªông...")
    time.sleep(30)
    
    # B·∫Øt ƒë·∫ßu x·ª≠ l√Ω
    process_messages() 